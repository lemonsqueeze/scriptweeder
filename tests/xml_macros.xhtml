<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
  <!-- doesn't seem to have any effect whith file:// uri, only .xhtml matters it seems ... -->
  <meta http-equiv="Content-Type" content="application/xhtml+xml"/>

  <style>
    body{font-family:Ubuntu,Tahoma,Sans}
  </style>
</head>

<body>
<h1>XML Macros</h1>

An experiment with xml macro expansion in javascript (clumsy comment syntax).<br/>
Cool thing with xhtml, innerHTML takes xml so no need to hack around self-closing tags.
<div>
<textarea rows="24" cols="80" id="layout" spellcheck="false">
<![CDATA[
<div id="1">
  <widget item="42"/>
</div>
<div id="3"></div>


<def widget item ><!-- 
   <p>{item}</p>
   <other_widget title="{item}" label="fake link"/>
--></def>

<def other_widget title label ><!-- 
   <a title="{title}">{label}</a>
--></def>
]]>
</textarea>
</div>
<button onclick="clearit()" >Clear</button>
<button onclick="doit()" >Generate html !</button>
<p></p>
<button onclick="saveit()">Save Result</button><br/>
<textarea rows="14" cols="80" id="html" spellcheck="false"></textarea>

<script>
//<![CDATA[
function clearit()
{
    var w = document.getElementById('layout');
    w.innerText = "";
    var w = document.getElementById('html');
    w.innerText = "";
}

function doit()
{
    var input = document.getElementById('layout');
    var layout = input.innerText;
    layout = hmxp(layout);
    var output = document.getElementById('html');
    output.innerText = layout;
}

function saveit()
{
    var res = document.getElementById('html').innerText;
    var url = "data:application/binary;base64," + btoa(res);
    location.href = url;
}

// expand html macros
function hmxp(hmxp_str)
{
    // these create xml parsers, but we can't use .innerHTML then ...
    // var doc = (new DOMParser()).parseFromString('<dummy/>', 'text/xml');
    // var doc = document.implementation.createDocument("", "", null);
    // var main = doc.documentElement;
    
    // so use document since it's xhtml ...
    // update: that trick doesn't work actually, we still get non xml output from innerHTML
    var doc = document;
    var main = doc.createElement('div');
    
    main.innerHTML = hmxp_str;
    expand_macros();
    return main.innerHTML;


    function get_defs()
    {
	// FIXME warn about multiple definitions
        var l = main.getElementsByTagName('def');
	var defs = new Object();
	for (var i = 0; i < l.length; i++)
	{
	    var d = l[i];
	    // name is first attribute
	    var name = d.attributes[0].name;
	    //alert("added def " + name);
	    defs[name] = d;
	}
	return defs;
    }

    function all_attributes(n)
    {
	var a = n.attributes;
	var s = "";
	for (var i = 0; i < a.length; i++)
	    s += " " + a[i].name + '="' + a[i].value + '"';
	return s;
    }
    
    function eval_tag_macro(macro, node, tag)
    {
	var div = doc.createElement('div');
        var s = macro.innerHTML;
	s = s.replace("<!--", "");
	s = s.replace("-->", "");

	// {@} == all attributes
	if (s.indexOf("{@}") != -1)
	    s = s.replace("{@}", all_attributes(node));
	
	// now substitute parameters
	var a = macro.attributes;
	for (var i = 1; i < a.length; i++)
	{
	    var name = a[i].name;
	    var val = a[i].value; // macro default value
	    if (node.hasAttribute(name))
		val = node.getAttribute(name);
	    else
//		if (val == "")	    
		{
		    alert("<" + tag + "> tag: missing parameter '" + name + "'");
		    return null;
		}
	    var pattern = new RegExp("{" + name + "}", 'g');
	    s = s.replace(pattern, val);
	}
	
	div.innerHTML = s;
	//alert("after subst: " + s);
	// alert("children: " + div.children.length);
	return div;
    }

    function reparent_nodes(before, nodes, parent)
    {
	while (nodes.firstChild)
	    parent.insertBefore(nodes.firstChild, before);
    }

    function replace_a_node(nodes, defs)
    {
        for (var i = 0; i < nodes.length; i++)
	{		    
	    var n = nodes[i];    
	    var tag = n.tagName.toLowerCase();
	    if (tag == 'def')	// remove def tags
	    {
		n.parentNode.removeChild(n);
		return true;
	    }
	    if (defs[tag])
	    {
	        //alert("i have a def for " + n.tagName);

                // with a html doctype we'd need this:
		// we're not using closing tags, so our siblings end up as children. move them up
		//reparent_nodes(n.nextSibling, n, n.parentNode);
		
	        var subst = eval_tag_macro(defs[tag], n, tag);
		reparent_nodes(n, subst, n.parentNode);
		n.parentNode.removeChild(n);
		return true;
	    }
	}
	return false; // didn't do anything
    }
    
    function expand_macros()
    {
        var defs = get_defs()
	var nodes;
	
	do {
	    nodes = main.getElementsByTagName('*');
	} while (replace_a_node(nodes, defs));
    }    
}


//]]>
</script>


</body>
</html>
